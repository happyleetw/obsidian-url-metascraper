/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => UrlBookmarkConverterPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  apiEndpoint: "https://happylee.app/scraper"
};
var UrlBookmarkConverterPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "convert-bookmarks",
      name: "\u8F49\u63DB\u66F8\u7C64",
      callback: () => this.convertBookmarks()
    });
    this.addSettingTab(new SettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async convertBookmarks() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("\u8ACB\u5148\u958B\u555F\u4E00\u500B Markdown \u6A94\u6848");
      return;
    }
    try {
      const content = await this.app.vault.read(activeFile);
      const matches = this.findBookmarkPatterns(content);
      if (matches.length === 0) {
        new import_obsidian.Notice("\u672A\u627E\u5230\u9700\u8981\u8F49\u63DB\u7684\u66F8\u7C64\u6A21\u5F0F");
        return;
      }
      new import_obsidian.Notice(`\u627E\u5230 ${matches.length} \u500B\u9700\u8981\u8F49\u63DB\u7684\u66F8\u7C64\uFF0C\u958B\u59CB\u8655\u7406...`);
      let newContent = content;
      let offset = 0;
      for (const match of matches) {
        try {
          const metadata = await this.fetchMetadata(match.url);
          if (metadata.success && metadata.data) {
            const bookmarkHtml = this.generateBookmarkHtml(metadata.data);
            const actualStart = match.startIndex + offset;
            const actualEnd = match.endIndex + offset;
            newContent = newContent.slice(0, actualStart) + bookmarkHtml + newContent.slice(actualEnd);
            offset += bookmarkHtml.length - match.fullMatch.length;
            new import_obsidian.Notice(`\u2705 \u6210\u529F\u8F49\u63DB: ${metadata.data.title || match.url}`);
          } else {
            const errorMessage = `%% \u8F49\u63DB\u5931\u6557: ${metadata.error || "\u672A\u77E5\u932F\u8AA4"} %%`;
            const actualStart = match.startIndex + offset;
            const actualEnd = match.endIndex + offset;
            newContent = newContent.slice(0, actualStart) + errorMessage + "\n" + match.fullMatch.replace("%%bookmarkthis%%\n", "") + newContent.slice(actualEnd);
            offset += errorMessage.length + 1 - "%%bookmarkthis%%\n".length;
            new import_obsidian.Notice(`\u274C \u8F49\u63DB\u5931\u6557: ${match.url}`);
          }
          await new Promise((resolve) => setTimeout(resolve, 500));
        } catch (error) {
          console.error("\u8655\u7406\u66F8\u7C64\u6642\u767C\u751F\u932F\u8AA4:", error);
          new import_obsidian.Notice(`\u274C \u8655\u7406\u66F8\u7C64\u6642\u767C\u751F\u932F\u8AA4: ${match.url}`);
        }
      }
      await this.app.vault.modify(activeFile, newContent);
      new import_obsidian.Notice("\u66F8\u7C64\u8F49\u63DB\u5B8C\u6210\uFF01");
    } catch (error) {
      console.error("\u8F49\u63DB\u66F8\u7C64\u6642\u767C\u751F\u932F\u8AA4:", error);
      new import_obsidian.Notice("\u8F49\u63DB\u66F8\u7C64\u6642\u767C\u751F\u932F\u8AA4\uFF0C\u8ACB\u67E5\u770B\u63A7\u5236\u53F0");
    }
  }
  findBookmarkPatterns(content) {
    const matches = [];
    const pattern = /%%bookmarkthis%%\n!\[[^\]]*\]\(([^)]+)\)/g;
    let match;
    while ((match = pattern.exec(content)) !== null) {
      matches.push({
        fullMatch: match[0],
        url: match[1],
        startIndex: match.index,
        endIndex: match.index + match[0].length
      });
    }
    return matches;
  }
  async fetchMetadata(url) {
    try {
      const encodedUrl = encodeURIComponent(url);
      const apiUrl = `${this.settings.apiEndpoint}/${encodedUrl}`;
      const response = await fetch(apiUrl);
      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }
      const data = await response.json();
      return data;
    } catch (error) {
      console.error("API \u8ACB\u6C42\u5931\u6557:", error);
      return {
        success: false,
        error: error.message
      };
    }
  }
  generateBookmarkHtml(metadata) {
    const title = metadata.title || "\u7121\u6A19\u984C";
    const description = metadata.description || "\u7121\u63CF\u8FF0";
    const url = metadata.url || "";
    const image = metadata.image || "";
    const author = metadata.author || "";
    const publisher = metadata.publisher || "";
    const logo = metadata.logo || "";
    return `<figure class="kg-card kg-bookmark-card">
    <a href="${url}" class="kg-bookmark-container">
        <div class="kg-bookmark-content">
            <div class="kg-bookmark-title">${title}</div>
            <div class="kg-bookmark-description">${description}</div>
            <div class="kg-bookmark-metadata">
                ${logo ? `<img src="${logo}" class="kg-bookmark-icon">` : ""}
                ${author ? `<span class="kg-bookmark-author">${author}</span>` : ""}
                ${publisher ? `<span class="kg-bookmark-publisher">${publisher}</span>` : ""}
            </div>
        </div>
        ${image ? `<div class="kg-bookmark-thumbnail">
            <img src="${image}">
        </div>` : ""}
    </a>
</figure>`;
  }
};
var SettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "URL Bookmark Converter \u8A2D\u5B9A" });
    new import_obsidian.Setting(containerEl).setName("API \u7AEF\u9EDE").setDesc("Metascraper Worker \u7684 API \u7AEF\u9EDE\u7DB2\u5740").addText((text) => text.setPlaceholder("https://happylee.app/scraper").setValue(this.plugin.settings.apiEndpoint).onChange(async (value) => {
      this.plugin.settings.apiEndpoint = value;
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u4F7F\u7528\u8AAA\u660E" });
    const instructions = containerEl.createEl("div");
    instructions.innerHTML = `
      <p>\u4F7F\u7528\u6B64\u63D2\u4EF6\u8F49\u63DB\u66F8\u7C64\u7684\u6B65\u9A5F\uFF1A</p>
      <ol>
        <li>\u5728 Markdown \u6A94\u6848\u4E2D\u4F7F\u7528\u4EE5\u4E0B\u683C\u5F0F\u6A19\u8A18\u8981\u8F49\u63DB\u7684 URL\uFF1A</li>
        <li><code>%%bookmarkthis%%</code></li>
        <li><code>![\u63CF\u8FF0\u6587\u5B57](\u7DB2\u5740)</code></li>
        <li>\u57F7\u884C\u300C\u8F49\u63DB\u66F8\u7C64\u300D\u547D\u4EE4</li>
        <li>\u63D2\u4EF6\u6703\u81EA\u52D5\u7372\u53D6\u7DB2\u9801\u5143\u6578\u64DA\u4E26\u8F49\u63DB\u70BA HTML \u66F8\u7C64\u5361\u7247</li>
      </ol>
      <p><strong>\u6CE8\u610F\uFF1A</strong>\u8F49\u63DB\u5931\u6557\u6642\u6703\u4FDD\u7559\u539F\u59CB\u5167\u5BB9\u4E26\u6DFB\u52A0\u932F\u8AA4\u8A0A\u606F\u3002</p>
    `;
  }
};
